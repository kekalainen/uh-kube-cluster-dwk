---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUxYelhXNG5CVG1CcnhOaDB1TW1MY0l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBM01URXdNalEzTWpOYQpGdzB5TWpBM01URXdNalEzTWpOYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMxYVRadFpLVVU5R2g5QS9FQTdodWMKZVRWSkgrZ2Vpa2F0L0hRdFBlalgxbGp3bVJFM3FGZVJKVERJTTB4L2VHVkFZVjFjV2laaHZxWjUzekpXb3JicApSWVlUZmxrb0FrRzc0c0JENXNpTFU1czVteXlveWxPVkJSbjRhT1NIdG51Lzc5WDJvTVRmTWprdnNtYU5HeVZzCk43dVIvcU9ocTJoYWlCRHF6d0VTMDQvZGdiZ2NBSDM0N3pYNndJR3c1TkpLSjJBOGhCRHErdE9raExuVXkvLzgKYXlTc2RTUlpLaWRHNnBuYzZLNElkRjhyV3VHVzBJRUgybFREMkdHS3gyN21CcEhqWU1FVjRWcUNJWTM5ZFdsQwoxYkY5emZ1U2x0UTlJYmcrT2N0RnV2Rk05VFF1REtoMW1icEVsb0ZsZTJLNWwvSDFtWVFvVHBZRFNOWU0yT1JQCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXFGOHV1MGxlOFpMeG92QlZwaStNWWJvUko4Z0c0CnhYdjNiZThoMUVqd3hLTXRibU96RXAzSVNJbzJhTDZzN1VZdHAweXk0b3dYWWFEbmxOcldYK3FtbjZLc0x4Sm4KZCtveW5OTjV3aDdTTDJYZ2EzSW84OXJxekt5ZWRpNXFFaUg0NWVKSWJUVEV3aTlBMHJ1Ukx2bDRpZ1o0T29yWgpUbi9SQXFCeVdKUTlyVSsyQU5leXZWRWJXQlc1dUJhUEd6MmJoVzFuMDFWcXVkYnAwbXZBWWdtV1J0SlJ0aDRDClZuQ3h2SUZPa0lLNkV6UEZKdlpVa0pQbDV4bm02ZWV2TWdQOGU3UnVvVlRlQlBHVm9qRGl3ejRYSWYzRWZibWUKUEtKbGhkMXh3QXRoS1lUZzByRzNmS0haSzF0OTBnN0xPdHFHR2RsMUNUbURlREprM0JDT3p4RXUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdFdrMmJXU2xGUFJvZlFQeEFPNGJuSGsxU1Ivb0hvcEdyZngwTFQzbzE5Wlk4SmtSCk42aFhrU1V3eUROTWYzaGxRR0ZkWEZvbVliNm1lZDh5VnFLMjZVV0dFMzVaS0FKQnUrTEFRK2JJaTFPYk9ac3MKcU1wVGxRVVorR2praDdaN3YrL1Y5cURFM3pJNUw3Sm1qUnNsYkRlN2tmNmpvYXRvV29nUTZzOEJFdE9QM1lHNApIQUI5K084MStzQ0JzT1RTU2lkZ1BJUVE2dnJUcElTNTFNdi8vR3NrckhVa1dTb25SdXFaM09pdUNIUmZLMXJoCmx0Q0JCOXBVdzloaGlzZHU1Z2FSNDJEQkZlRmFnaUdOL1hWcFF0V3hmYzM3a3BiVVBTRzRQam5MUmJyeFRQVTAKTGd5b2RabTZSSmFCWlh0aXVaZng5Wm1FS0U2V0EwaldETmprVHdJREFRQUJBb0lCQUVuRTRRY1crREpQT1BZdApWaUdFc2VHdFFFZmVHNnZmbXVKQldKVFZLZ3dxODd2UzRyZDVVektJcHcraUhLZHhNK3M4TEpUVGErd3ZkTTcyClBpZ1F2c1NaS3U1ZVlLN3VUQUMxTW0zcU9QNi9IczRNRmRzRmUzdUx1WVhVVWFvR1FNaEtKUDNIWG9kTWl3aWsKU1NOME9JR0xJRkU3OVJwVzgzWnRBa1FaclZ3VHo0QnRSNFlrcUlpNG1DdVZ2aHc0WmtDeFJoaTlUQXNIRTMxVQpON0VqYjZSYlBkZFlORHBJSk9oT3pWOURFZEZYL0JoN2l4dlExaFpqVVVmRklqbXRTQ0FNdXlJeXB4QVpTcGQ3CllJRXBBYU1tYTZ2WnI4eEZXTW9nVGFDdEh6Y0svZ0VnYUp6djFhMHdtTHZMK2xTT0RENTF1NEt6dEZqd0pIV3kKN0ZEQXJZRUNnWUVBd001akZDdkM3bkhiR0VmQWQwWnZNK2JVaGJ3RlZPbC9QTUxNK1Bta3IwQ2xVMXhYNkNKUgp3ckVVNXVXMnUweHVmODl6VkR5N01ZNVBrVmhHT2NBL2NKOXM4VjNRL2FrRmtDWlhnVlJMcUY3NDJYcGxvV0NNCjVDUGMyS3FhZnRHcHZ6VW1McEY0TzFvdTdEOURpZmZpTkZxS2JuWWNDd0w0aXhQV25EYVlOaUVDZ1lFQThONnkKcTF3ZE9HZzdndU1ibk9ONGtxT1N1ZEo2Z0ErcmNRZTQwY1RSZ2MyTjkyZWNMRTFSMitnZllWVktrVTV3aGhPSgpUVTRpUjR3ejN1SUhOdGgyOUVEbnRtVXcvMlhjcXVhc1ZCL1NOMFhodkNjK2d3OVB6VURRNlhzSys2Vm0wRU9xCmJQQ3FuRFNCWmhscHUwVXNNL1VGbmlqOGFvVHpGbU1ncTdxVDdHOENnWUFGQ0o1ZmxYRG1ac1NRa3JiOHBqTWIKQ01pOW9SWUdqSDRNNlEwTzV2MmNzYlJmUThicndaR2U0cDZvRkpFN3ZKZ1o4Q0dUcm00NHNmMXp6dmt1WXMyRgpORFJVN04wYThrRzU3TFpXSXd4Q25oQWpKV1huMjZ4eC9GbTBzbWVNTGc4ZmRkVEVYSG5tR3NtazAxWUJFUjZ2CnZUbGwvdUZtakRKTzl6cWdJM0MvNFFLQmdFYkE4L1RZS3hFdHRRVitsdGJnRHNQc1hxWk5DSVRqbFhXdlVmLzAKYzZKUWNqcFJhaE90WnJWVkd4cXBSaTBtd0hEeC9pd0NIcG1ydW5UbktqMVhHcUluQ3FtT1VmVkR3NjFEOHkwRwo1K1lxbGVPQ0Y1L0IrS3dQTlE3UWdPcG9yS25TcHBZM243WWd5ajNtaXlOaWIxaVh5ZDJxcG5MWHVOeERwQTR0CjBWUHJBb0dBRGlKZ1phYTRxUlNiQUhsVVI3TnE0U21vYlluTGY4K2tXUjJOMk9mMkFHSmtqSzEyd0k3RUZZZDAKZFFxSi9YMDBVNXgzVE42V0RLSkI4MnBXNlRwQVZJemM2RitSb29URGMxMk9EVFJ1TlMvbDJ3RG1PRTZGenlsdQpOenlKMGlCTmZuTGo1VlhmcUZLaUZ3Um9iZ1JZbXMxUG5MQXR2Y1FIQXk0WUE2V24zdFE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUxYelhXNG5CVG1CcnhOaDB1TW1MY0l3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TVRBM01URXdNalEzTWpOYQpGdzB5TWpBM01URXdNalEzTWpOYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMxYVRadFpLVVU5R2g5QS9FQTdodWMKZVRWSkgrZ2Vpa2F0L0hRdFBlalgxbGp3bVJFM3FGZVJKVERJTTB4L2VHVkFZVjFjV2laaHZxWjUzekpXb3JicApSWVlUZmxrb0FrRzc0c0JENXNpTFU1czVteXlveWxPVkJSbjRhT1NIdG51Lzc5WDJvTVRmTWprdnNtYU5HeVZzCk43dVIvcU9ocTJoYWlCRHF6d0VTMDQvZGdiZ2NBSDM0N3pYNndJR3c1TkpLSjJBOGhCRHErdE9raExuVXkvLzgKYXlTc2RTUlpLaWRHNnBuYzZLNElkRjhyV3VHVzBJRUgybFREMkdHS3gyN21CcEhqWU1FVjRWcUNJWTM5ZFdsQwoxYkY5emZ1U2x0UTlJYmcrT2N0RnV2Rk05VFF1REtoMW1icEVsb0ZsZTJLNWwvSDFtWVFvVHBZRFNOWU0yT1JQCkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXFGOHV1MGxlOFpMeG92QlZwaStNWWJvUko4Z0c0CnhYdjNiZThoMUVqd3hLTXRibU96RXAzSVNJbzJhTDZzN1VZdHAweXk0b3dYWWFEbmxOcldYK3FtbjZLc0x4Sm4KZCtveW5OTjV3aDdTTDJYZ2EzSW84OXJxekt5ZWRpNXFFaUg0NWVKSWJUVEV3aTlBMHJ1Ukx2bDRpZ1o0T29yWgpUbi9SQXFCeVdKUTlyVSsyQU5leXZWRWJXQlc1dUJhUEd6MmJoVzFuMDFWcXVkYnAwbXZBWWdtV1J0SlJ0aDRDClZuQ3h2SUZPa0lLNkV6UEZKdlpVa0pQbDV4bm02ZWV2TWdQOGU3UnVvVlRlQlBHVm9qRGl3ejRYSWYzRWZibWUKUEtKbGhkMXh3QXRoS1lUZzByRzNmS0haSzF0OTBnN0xPdHFHR2RsMUNUbURlREprM0JDT3p4RXUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 63b053a0df8ec8f9985d94bafbc404329ea8923fd09b33e3effd8cb0902f311f
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRV0dVL2h5akJ5YUFkaWlZMVJrRjJsREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURjeApNVEF5TkRjeU5Gb1hEVEl5TURjeE1UQXlORGN5TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5pRWpEQ212T0ZCanZMWUVkZU9GcWVZUEFBZVNFUjQ0aEtVdVR4RXN1ekUwTXRLOUtkYnYvQ2hiR3JINTdGegpMZkcyRnV1OVFoWjJWdGdoZXF2MXV0d3F4bjNualduQ1VGdDJUbkZvUnlYZ0dhU1k2Rmo4YzQvTDBFRVZScE1BCjl1RDREZ3R1dVpHZ1k5TkNlNGYwdTAvdm9ZZHRITElob1ZuRzNBaVJHWG56WWg5N0xXZTRFWks2QlBEdkFwUGoKaXNDZUs5TzE4dWJSMlRuaU56aWJkRktOamZHUWVuci9hY1VxT0krUTB5UTJ2eURuUTAzRGRSQjh4YnFZS1BaRwpsOHVwQldVNGRyeXRWU3d6QjVpakthdzJLNHArb0VUZFNFUU8wYUQ2U2ZBR2NRWVVMZWRYdDBYMUVIUHNHRlgzCkNFQ2RtMXliamNpQjA2bWhnbk9ZNjZrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTkdScE1CZW5oMm5lWEVrd2dNNXZRczBKWndnak9BamQ3N3RTMGhQYWF0T2o2Q2xZdHFCYkw5SFhtUEEKb0V2MVNmODhXdnVxUTBpRHBJbzZVRm1ESWZJcEtNUHNSZDVpNmcycHcvMU4wZVFUaTB2RStFUFNobkJaWUE5ZgoxbGtINGkrMU9hSzdrVlZKZ09JWjl3R3p4S3VHT1ZrYXd1c0xzNWZ3T2FCaWdrVVNjS3BCVytyMHFMbTlFWi9CCjZZYzBkTXVxb0k3OHVFYUJzS2ZFSjNYZlllQjdkUVZ4N0U3QWcyclUyQ00yTVNqQ3M4TVVFSEZBRVZoOVAxZjkKd29YVjl1NEhHZnRJZ2ZUbWJRWGRDS2RpdDg1enNYTXZKRU5Gd3NXS2JlVDZRMVN3WmN6Qk9tT2tFWTBlaFRoTApjMUM3ZDRMOGEvb0RkdG9NUURyRFB3aTFrbkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBMklTTU1LYTg0VUdPOHRnUjE0NFdwNWc4QUI1SVJIamlFcFM1UEVTeTdNVFF5MHIwCnAxdS84S0ZzYXNmbnNYTXQ4YllXNjcxQ0ZuWlcyQ0Y2cS9XNjNDckdmZWVOYWNKUVczWk9jV2hISmVBWnBKam8KV1B4emo4dlFRUlZHa3dEMjRQZ09DMjY1a2FCajAwSjdoL1M3VCsraGgyMGNzaUdoV2NiY0NKRVplZk5pSDNzdApaN2dSa3JvRThPOENrK09Ld0o0cjA3WHk1dEhaT2VJM09KdDBVbzJOOFpCNmV2OXB4U280ajVEVEpEYS9JT2REClRjTjFFSHpGdXBnbzlrYVh5NmtGWlRoMnZLMVZMRE1IbUtNcHJEWXJpbjZnUk4xSVJBN1JvUHBKOEFaeEJoUXQKNTFlM1JmVVFjK3dZVmZjSVFKMmJYSnVOeUlIVHFhR0NjNWpycVFJREFRQUJBb0lCQVFDM1c2aU5HdWNocTY4dgpJS1FiYzR6ajZSd0d6WjVOdmtGVmt2VTdnTUkxbUlkcFlkVEdWZ0M1K3pvaFE2R0d1US9UZm16eXZwZlZCZXFOCnBleUk2OVNPMXZxNWJQcG84ZEd6WXdFVE1VZnZYMVRYKzFYbzVnSEhhTWE0RnhocExZdmxBS3lFS2dTa3VydFAKRVNJa0JMRU1CTmM2Sk1FRWFVNkhCTTBaeENkYkNaNWFJRjFEZVM3emJYZkNqVThTTlRoSnM2TmtqcFJrNnIweApaVlVNSUg1ZG92YTFwS2psTnhmWXhSQktFSm5DYXg0ckZNUUlGMHFBM1lzL1QxcU1BVlFJanhxU3N5L3VTZmxmCmpETnhrTEg5NkMxcXVyTVNFbHh1Y0VqcjVnZHRhOWp1WHNOdlFHbE80V2dtV1VOayt5dEpleW5hYUZiMG5CYTcKVDRXcHR2TEJBb0dCQVBpVjFocDNyajR0S2t2bFhaRmFHMm9scnJQc3B3cktSRkMySEkwSy80Wm9iZU1iTUhlWgpKMHo5bGJvM2krckpTVVZ5L0dRNWh4UGdNaWZFZlRWTmdmTEYzVzhsTnhkdDVlS0docnhWeHBzYWJBcms0c2tPCkt2Uk5sM1BZMUlXdHcrellKYkdlckZtNFRnSFAydE9xK0ExUWZPRk5rL1ZldEQycmRua0FrVlp0QW9HQkFONzUKMlJIMTVQTlpuejVRRFNCcU96V3k5VS9tcmh4NTZvaEJmSWpMYUtBbmpyekpjYlpFYk15NVJ0bGg0dFNaYWs3dwpIMkt1b2VIT1ZucnJoV3U0STFCTzAzemFsL1BtbmhWZmhHUHIyVHpsVXJ6Zk5lVEZiRFJvcHg1NlBISUNYb2dlCkdqM2JVSFVlS1pTRXUya0dBQkZNQktxdXB5RlBybi83OWswUWhSU3RBb0dCQU5ONFpCTlFET0xIK1Z0blhCbnkKMWErUEx2ZlJNcWx6T0hxUThlanFta1gxUU1ZYXN6aUxDV3Z0cmhva2R0cmRNWC9yT2RycE5ZZ3JDWC9iSDhqZwpqdFBBajRlbDJTQU5WYXRIVmdlUjBNclJ4MmZkSHpCNjVQKy9vai9qRGFoTEVvbkJ0dzlMTk1OK2pwM3IvUFJrClZYQytMLzVheUt2TVRQakpqSmVUYkJCaEFvR0JBTXpoRWYyWXpVaDFId2Nva3djbjFVUGdMZHUvQUZpV0JWUXgKcC9ZaHdQNzNtZ1lKcXZ4cEh2ZDFmbzRialVyL3RGalg5bDY4UzI2cUkzaEtsSXVINUpyVDh5dVR4MitLaGRMcApzMElFNGRVOGVhdW1CV1V4cWR6MkZDakM5R3RsbGVySWppQXNObCtHMlhub0JEUGFHWkhMSWJhYlNHSXBUeE8yCk5uaFZKNUw1QW9HQkFJZ1VLY3cvTllURlZ5dkpyOFNJT1VNTXFXaEtUYlJDRWwvcGU3ZVpkTGNWZzlHdXErcWsKbHcrQXYvcmxEWDNGRXZERUQwWTNZRWlQc1lZM3RjZXpBYys0TVdldmNRcmFJS1BJdGhQbDBQaXZqNmNJL0o4eQpXdVNxK3d3NTRNeWtrZVZVbStzc1VvVEdZbVRaN3BwZVRySUt6S2hNRnJLMFpRcWttalFNNGp0ZgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRV0dVL2h5akJ5YUFkaWlZMVJrRjJsREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURjeApNVEF5TkRjeU5Gb1hEVEl5TURjeE1UQXlORGN5TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5pRWpEQ212T0ZCanZMWUVkZU9GcWVZUEFBZVNFUjQ0aEtVdVR4RXN1ekUwTXRLOUtkYnYvQ2hiR3JINTdGegpMZkcyRnV1OVFoWjJWdGdoZXF2MXV0d3F4bjNualduQ1VGdDJUbkZvUnlYZ0dhU1k2Rmo4YzQvTDBFRVZScE1BCjl1RDREZ3R1dVpHZ1k5TkNlNGYwdTAvdm9ZZHRITElob1ZuRzNBaVJHWG56WWg5N0xXZTRFWks2QlBEdkFwUGoKaXNDZUs5TzE4dWJSMlRuaU56aWJkRktOamZHUWVuci9hY1VxT0krUTB5UTJ2eURuUTAzRGRSQjh4YnFZS1BaRwpsOHVwQldVNGRyeXRWU3d6QjVpakthdzJLNHArb0VUZFNFUU8wYUQ2U2ZBR2NRWVVMZWRYdDBYMUVIUHNHRlgzCkNFQ2RtMXliamNpQjA2bWhnbk9ZNjZrQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTkdScE1CZW5oMm5lWEVrd2dNNXZRczBKWndnak9BamQ3N3RTMGhQYWF0T2o2Q2xZdHFCYkw5SFhtUEEKb0V2MVNmODhXdnVxUTBpRHBJbzZVRm1ESWZJcEtNUHNSZDVpNmcycHcvMU4wZVFUaTB2RStFUFNobkJaWUE5ZgoxbGtINGkrMU9hSzdrVlZKZ09JWjl3R3p4S3VHT1ZrYXd1c0xzNWZ3T2FCaWdrVVNjS3BCVytyMHFMbTlFWi9CCjZZYzBkTXVxb0k3OHVFYUJzS2ZFSjNYZlllQjdkUVZ4N0U3QWcyclUyQ00yTVNqQ3M4TVVFSEZBRVZoOVAxZjkKd29YVjl1NEhHZnRJZ2ZUbWJRWGRDS2RpdDg1enNYTXZKRU5Gd3NXS2JlVDZRMVN3WmN6Qk9tT2tFWTBlaFRoTApjMUM3ZDRMOGEvb0RkdG9NUURyRFB3aTFrbkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: d6863f41b51d9646a513572163c54a967640181abc911e78e0934344c94260d4
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.2
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.2
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
